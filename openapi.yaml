openapi: 3.0.3
info:
  title: Untapped Energy Application
  description: >-
    An application for better support of the ongoing learning initiatives of Untapped Energy.
  version: "0.7.0"

servers:
  - url: http://localhost/api:5001
    description: Local host

paths:
  /:
    get:
      summary: Detect server
      description: Detect whether the server is running or not.
      responses:
        "200":
          description: Server is running.
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

  /auth:
    get:
      summary: Log a user in
      description: Log a user in.
      security:
        - AuthHTTPBasic: []
      responses:
        "200":
          description: >-
            User logged in.  The token in the response body is the bearer token that represents
            the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: User not found.
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

    post:
      summary: Add a new user.
      description: Add a new user to the system.
      security:
        - AuthHTTPBasic: []
      requestBody:
        description: Details of the user to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInfo"
      responses:
        "201":
          description: >-
            User successfully added.  The token in the response body is the bearer token that
            represents the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "403":
          description: User already exists.
        "406":
          $ref: "#/components/responses/InvalidData"
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

  /auth/recovery:
    get:
      summary: Send an e-mail with a token for changing a user's password
      description: >-
        Send an e-mail with a single-use time-limited token that can be used to reset the
        password associated with that e-mail address.  The e-mail address is encoded with
        Base64 and passed as an HTTP Bearer authentication token.  For security reasons, no
        error responses are given (except for database connectivity issues).
      security:
        - AuthHTTPBearer: []
      responses:
        "202":
          description: >-
            A message has been sent to the e-mail address provided.  This message will include
            a single-use time-limited token that will allow the user to set a new password for
            their account.  The body of the response contains another single-use time-limited
            token that's to be passed as the "userId" part of an HTTP Basic authentication
            header (see this path's PATCH method).
          content:
            application/json:
              schema:
                type: object
                properties:
                  userIdToken:
                    type: string
                required:
                  - userIdToken
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

    patch:
      summary: Change a user's password and log in.
      description: >-
        Change a user's password.  Set the "userId" part of HTTP Basic authentication to the
        token that was previously returned by this path's GET method, and set the "password"
        part to the token that was e-mailed to the user.  If successful then the user's
        password is changed and the user is logged in (the token in the response body is the
        bearer token that represents the user).
      security:
        - AuthHTTPBasic: []
      requestBody:
        description: The new password.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        "200":
          description: The password has been changed and the user is now logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "406":
          $ref: "#/components/responses/InvalidData"
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

  /user:
    get:
      summary: Return a specific user.
      description: Returns information about the user identified by the bearer token.
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

    patch:
      summary: Update a specific user.
      description: Update information about the user identified by the bearer token.
      requestBody:
        description: Updated details of the user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "406":
          $ref: "#/components/responses/InvalidData"
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

    delete:
      summary: Delete a specific user.
      description: >-
        Removes the user identified by the bearer token from the system (as well as any related
        data).
      security:
        - AuthHTTPBearer: []
      responses:
        "200":
          description: User successfully deleted.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"
  /courses:
    summary: Perform Create and Read operations on courses.
    description: This resource comprises of READ and Write operations that can be performed on the courses object.
    get:
      summary: Get all the courses.
      description: Returns a list of course.
      parameters:
        - in: query
          name: page
          description: Page number of results to retrieve.
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of results to retrieve per page.
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      tags:
        - Courses
      responses:
        "200":
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: No Courses not found.
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"
    post:
      summary: Create a new course.
      description: Create a new course resource.
      tags:
        - Courses
      requestBody:
        description: Course details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: Course successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "406":
          description: Invalid data.
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

  /courses/{id}:
    get:
      summary: Retrieve a specific course.
      description: Fetch the course resource by specifying its ID.
      tags:
        - Courses
      responses:
        "200":
          description: Course successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "404":
          description: Course not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"
    put:
      summary: Update a specific course.
      description: Update the course resource by specifying its ID.
      tags:
        - Courses
      requestBody:
        description: Updated course details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "200":
          description: Course successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "404":
          description: Course not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "406":
          description: Invalid data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"
    delete:
      summary: Delete a specific course.
      description: Delete the course resource by specifying its ID.
      tags:
        - Courses
      responses:
        "204":
          description: Course successfully deleted.
        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "404":
          description: Course not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        "504":
          $ref: "#/components/responses/CantConnectToDatabase"

components:
  securitySchemes:
    AuthHTTPBasic:
      type: http
      scheme: basic
    AuthHTTPBearer:
      type: http
      scheme: bearer

  responses:
    CantConnectToDatabase:
      description: Can"t connect to database.
    InvalidData:
      description: Invalid data.
    Unauthorized:
      description: Not authorized.

  schemas:
    RegistrationInfo:
      type: object
      properties:
        name:
          type: string
        isInstructor:
          type: boolean
      required:
        - name
        - isInstructor

    Credential:
      type: object
      properties:
        # Naming conventions in this section comply with RFC 6749 (The OAuth 2.0 Authorization
        # Framework) which may be used later -- see
        # https://datatracker.ietf.org/doc/html/rfc6749#section-5.1

        access_token:
          type: string
        token_type:
          type: string
          enum:
            - "Bearer"
        user_data:
          $ref: "#/components/schemas/UserData"
      required:
        - access_token
        - token_type
        - user_data

    UserData:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        learnerData:
          $ref: "#/components/schemas/LearnerData"
          nullable: true
        instructorData:
          $ref: "#/components/schemas/InstructorData"
          nullable: true
      required:
        - name
        - email
        - learnerData

    LearnerData:
      type: array
      items:
        $ref: "#/components/schemas/Course"

    InstructorData:
      type: array
      items:
        $ref: "#/components/schemas/Course"

    Course:
      type: object
      properties:
        UID:
          type: string
        title:
          type: string
        description:
          type: string
        instructor:
          type: string
        components:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Module"
              - $ref: "#/components/schemas/Assessment"
        currentComponent:
          type: integer
        creationTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
      required:
        - UID
        - title
        - description
        - components
        - instructorID
        - creationTime
        - updateTime

    Module:
      type: object
      properties:
        UID:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - "Audio"
            - "Video"
            - "Markdown"
        chapters:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        url:
          type: string
        urlAuthentication:
          type: object
          properties:
            scheme:
              type: string
            parameters:
              type: string
          required:
            - scheme
            - parameters
        creationTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
      required:
        - UID
        - title
        - description
        - type
        - url
        - creationTime
        - updateTime

    Assessment:
      type: object
      properties:
        UID:
          type: string
        title:
          type: string
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        currentQuestion:
          type: integer
        creationTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
      required:
        - UID
        - title
        - questions
        - creationTime
        - updateTime

    Question:
      type: object
      properties:
        UID:
          type: string
        question:
          type: string
        choices:
          type: array
          items:
            type: string
        answer:
          type: integer
        correctChoice:
          type: integer
        explanation:
          type: string
        creationTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
      required:
        - UID
        - question
        - choices
        - correctChoice
        - explanation
        - creationTime
        - updateTime
